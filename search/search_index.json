{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>          GeneWeaver      </p> <p> A system for the integration and analysis of heterogeneous functional genomics data. </p> <p>Web Application:  https://www.geneweaver.org</p> <p>Web Application Documentation:  https://geneweaver.org/help/</p> <p>Project Documentation (this site):  https://bergsalex.github.io/geneweaver-docs/</p>"},{"location":"#components-of-geneweaver","title":"Components of GeneWeaver","text":"<p>GeneWeaver is two things: </p> <ol> <li>A web application \ud83d\udda5\ufe0f, and </li> <li>An ecosystem of software packages \u2699\ufe0f.</li> </ol> <p>Genomics Researchers will find the web application useful as a fully integrated  platform for the analysis of heterogeneous functional genomics data.</p> <p>Educators, students and software developers will find the ecosystem of  software packages useful for the development of new tools and applications.</p>"},{"location":"#what-is-this-documentation","title":"What is this Documentation?","text":"<p>This documentation is intended to be the foundational documentation for the entire Geneweaver software ecosystem. It provides an introduction to the system and ways of working with it, explanations of core concepts, tutorials of general utility, as well as detailed reference documentation for the various components and processes that make up the system.</p>"},{"location":"#geneweaver-use-cases","title":"GeneWeaver Use Cases","text":"<p>Your entrypoint to GeneWeaver will depend on who you are, and what you would like to do with GeneWeaver. The following sections will help you find the right place to start depending on our best guess as to your goals, based on who you are. Ultimately, you will need to make your own decisions about what approach works best for you.</p> Researchers \ud83d\udd2cEducators &amp; Students \ud83d\udcdaSoftware Developers \ud83d\udcbbData Scientists \ud83d\udcca <p>Geneweaver is a valuable resource for any genomics researchers looking to integrate and  analyze complex datasets in order to gain new insights into biological processes and  pathways.</p> <p>Geneweaver allows researchers to easily compare and combine datasets from various  sources and analyze the results in an interactive and user-friendly interface. The  system includes a large collection of publicly available datasets, including gene  expression data, protein-protein interactions, and gene ontology annotations, among  others. Geneweaver is a valuable resource for researchers in the field of genomics and  can be used to identify novel gene interactions and pathways, as well as to explore the  functional relationships between genes and biological processes.</p> <p>For educators, GeneWeaver provides a comprehensive platform for integrating real world  data and open sources software into the classroom. GeneWeaver provides data, tools,  systems, and workflows that can be used to teach students about genomics,  bioinformatics, computer science and data science. </p> <p>GeneWeaver allows students and educators to integrate with a full cycle of development  and learning, starting with application to real-world concepts and data, and ending with the development and contribution of new tools and applications.</p> <p>The following disciplines might find GeneWeaver useful:</p> <ul> <li>Computer Science<ul> <li>Algorithms</li> <li>Software Engineering</li> <li>Databases</li> <li>Data Science</li> </ul> </li> <li>Biology and Genomics</li> <li>Bioinformatics</li> <li>Mathematics</li> </ul> <p>For software developers, GeneWeaver provides a suite of open source software  packages that can be used for the development of new tools and applications.  GeneWeaver is built on a collection of open source software  packages. A software developer could use all or some of that ecosystem to build new applications and tools.</p> <p>Software developers can leverage the ecosystem of open source Python packages used  in Geneweaver.org through its package-based architecture to build new bioinformatics  tools and applications, contribute to existing packages, integrate with other tools, and address specific needs or gaps in the ecosystem.</p>"},{"location":"concepts/","title":"Core Concepts","text":"<p>In this section, we will explore the fundamental concepts and principles that underlie  Geneweaver. Understanding these core concepts is essential for gaining a deeper  understanding of how the web application, analysis tools, and software packages work,  and for using it effectively in your education, work or research.</p> <p>In this section, we will cover key concepts such as definitions, data structures, and algorithms, and will explore how these concepts are used in the context of Geneweaver.</p> <p>Whether you are new to the tool or have been using it for some time, this section will  provide you with the knowledge and understanding that you need to use the tool more  effectively, and to get the most out of its capabilities. So, let's get started and dive into the core concepts that underlie Geneweaver.</p>"},{"location":"concepts/genes-and-genesets/","title":"Genes and GeneSets","text":""},{"location":"concepts/genes-and-genesets/#genomic-features-genes","title":"Genomic Features (Genes)","text":"<p>A genomic feature \ud83e\uddec is any region of DNA that has a specific function or role in the  genome. Some common genomic features include genes, exons, introns, promoters, and  enhancers. Genomic features can be identified by a variety of methods, including  sequencing, hybridization, and annotation.</p> <p>In GeneWeaver, a genomic feature is a unique identifier for a genomic feature in a particular organism, mapped from an external data source. Genomic features are the basic unit of analysis, and are used the building blocks of GeneSets. </p> <p>Genomic features are important because they provide a framework for understanding the  structure and function of the genome. </p>"},{"location":"concepts/genes-and-genesets/#genesets","title":"GeneSets","text":"<p>GeneSets \ud83e\uddec+\ud83d\udcc2 are the fundamental unit of analysis in GeneWeaver.</p> <p>A GeneSet contains a list of genomic features, free text descriptive content, ontology  annotations and gene association scores. In GeneWeaver, Genomic features are mapped  within and across multiple species. </p> <p>a researcher might use Geneweaver to analyze gene expression data from a set of cancer  patients. By comparing the expression profiles of genesets associated with cancer  pathways such as the p53 signaling pathway or the cell cycle pathway, the researcher  might be able to identify genes or pathways that are dysregulated in the cancer samples.</p>"},{"location":"concepts/genes-and-genesets/#geneset-tiers","title":"Geneset Tiers","text":"<p>Genesets are organized into a hierarchy of tiers \ud83e\udd47\ud83e\udd48\ud83e\udd49\ud83c\udf31\ud83d\udd12, which are used to provide an easily  recognizable and intuitive way for users to understand the quality and reliability of the data in a geneset.</p> Geneset Tier Description \ud83e\udd47Tier IPublic Resource Data Professionally curated into another major database and are imported into GeneWeaver,which ensures consistency of metadata. \ud83e\udd48Tier IIMachine-Generated from public sources Computationally generated from data in public sources. \ud83e\udd49Tier IIIHuman-Curated Data Directly entered or reviewed by a professional curator for redundancy with existing records and adherence to documentation standards. \ud83c\udf31Tier IVSubmitted to Public-Provisional User submitted data that has been shared to the public prior to review. \ud83d\udd12Tier VPrivate User and Group Data, Uncurated Private data that is considered confidential and is not reviewed by a professional curator. <p>Tip</p> <p>For reference level description of Genset Tiers, see the Geneset Tiers reference page.</p>"},{"location":"concepts/geneweaver-data-model/","title":"Geneweaver Data Model","text":"<p>GeneWeaver utilizes a relational normalized data model to store both user data, and external sources data. The database is  designed to be flexible and extensible, and to allow for the addition of new data types  and analysis tools without requiring changes to the data model.</p> <p>On a high level the data model uses three  schemas to organize the types of data that are stored in the database. The schemas are:</p> <ul> <li><code>production</code>: Geneweaver Application Data</li> <li><code>odestatic</code>: Static Data</li> <li><code>extsrc</code>: External Sources Data</li> </ul> <p>This page discusses the concepts and structure of the data model in detail, but is not  intended to be used as a reference for the database and data model. For example, this  page does not use the actual database table and column names, but instead uses full  descriptive name of the entities and their relationships.</p> <p>Tip</p> <p>For a complete reference of the Geneweaver data model, see the  data model reference page. </p>"},{"location":"concepts/geneweaver-data-model/#production-schema","title":"Production Schema","text":"<p>The <code>production</code> schema is the primary schema used to store user data. The schema's  central entity is the <code>geneset</code> \ud83e\uddec+\ud83d\udcc2. The schema contains tables &amp; relationships for user data, but external source and static data relationships utilize tables in the <code>odestatic</code> and <code>extsrc</code> schemas.</p> <pre><code>erDiagram\n    GENESET }o--o| PUBLICATION : hasA\n    GENESET }o--|| USER : ownedBy\n    GENESET }o--o{ PROJECT: containedIn</code></pre>"},{"location":"concepts/geneweaver-data-model/#odestatic-schema","title":"ODEStatic Schema","text":"<p>The <code>odestatic</code> schema contains tables for static data, such as species, gene databases, and geneset tier. The schema is used to store data that is not expected to change, and is used to provide a reference for the <code>production</code> schema.</p> <p>The following diagram shows how the <code>geneset</code> \ud83e\uddec+\ud83d\udcc2 entity is related to the <code>odestatic</code> schema entities: <code>species</code> and <code>tier</code>. <pre><code>erDiagram\n    SPECIES }o--|| GENE_DB : usedBy\n    SPECIES ||--o{ GENESET : usedBy\n    GENESET }o--|| TIER : isOfA</code></pre></p> <p>The <code>odestatic</code> schema also contains tables that are used for internal tracking and configuration. Above, the <code>gene_db</code> entity for the <code>platform</code>, <code>tool</code>, and  <code>attribution</code> entities. These entities are used internally by the system to track information about enabled analysis tools, microarray expression platforms, and data  sources.</p> <pre><code>erDiagram\n    PLATFORM\n    TOOL\n    ATTRIBUTION</code></pre>"},{"location":"concepts/geneweaver-data-model/#extsrc-schema","title":"Extsrc Schema","text":"<p>The <code>extsrc</code> schema contains tables for external sources data, this is where the  magic \ud83e\ude84 happens. </p> <p>Fundamentally, the gene \ud83e\uddec to geneset \ud83e\uddec+\ud83d\udcc2 association is a many-to-many association. A geneset can contain many genes, and a gene can be associated with many genesets. To  represent this relationship, the association is stored in an  associative table, which we call  <code>geneset_value</code>.</p> <p>The <code>gene</code> entity is a  polymorphic entity that can be associated with multiple external sources, which are represented by the <code>gene_db</code> entity.</p> <p>The following diagram shows how the <code>geneset</code> \ud83e\uddec+\ud83d\udcc2 entity is related to the <code>extsrc</code> schema entities: <code>geneset_value</code>, <code>gene</code>, and <code>gene_db</code>.</p> <pre><code>erDiagram\n  GENESET_VALUE }o--|| GENESET : isOfA\n  GENESET_VALUE }o--|| GENE : isOfA\n  GENE ||--o{ GENE_DB : isOfA</code></pre> <p>Microarray Expression Data</p> <p>Geneweaver also supports microarray expression data. Due to its complexity, this  document does not cover the data model that supports this feature.</p> <p>For more information on microarray expression data, see the Data Model reference page.</p>"},{"location":"concepts/geneweaver-data/","title":"External Source Data","text":"<p>GeneWeaver utilizes several external data sources to provide users with a rich set of  genomic features and gene associations. </p> <p>These data sources include:</p> <ul> <li>Ensembl</li> <li>Entrez</li> <li>UniGene</li> <li>MGI</li> <li>HGNC</li> <li>RGD</li> <li>ZFIN</li> <li>FlyBase</li> <li>Wormbase</li> <li>SGD</li> <li>miRBase</li> <li>CGNC</li> </ul>"},{"location":"concepts/geneweaver-data/#background","title":"Background","text":"<p>Why bother with all these external data sources? Why not just use one?</p> <p>In genomics research, there are different types of gene and microarray identifiers  because the same gene can be referred to by different names or IDs, depending on the  context or the source of the information. This can happen even for genomic features  within the same species! All these different identifiers can create confusion and make  it difficult to compare and integrate data from different sources.</p> <p>Why are there so many different identifiers, you ask? There are a multitude of reasons, some of which are historical, some of which are technical, and some of which inherent to biology. </p> <p>A given gene may have multiple names or IDs that have been used in different  contexts as a result of how naming and annotation has evolved over time. It also can be the case that different databases just used different conventions. Annotations and naming conventions are also updated as new information about the function and structure  of genes becomes available.</p> <p>Genotype platforms, the methods or tool used to identify and detect genetic variations, can differ in their design and layout, which can affect the way genes are represented. This can lead to different probe IDs or other identifiers being used to refer to the  same genomic features on different platforms.</p> <p>Genomic feature identifiers can also differ between different species, since different  organisms have different sets of genes and thus different naming conventions for those  genes. Even if the same identifier is used across species, it may not refer to the same genomic feature, and the genomic feature itself might have entirely different  function. </p>"},{"location":"concepts/geneweaver-data/#geneweavers-solution","title":"GeneWeaver's Solution","text":"<p>GeneWeaver solves this problem by integrating data from multiple sources (listed above) and mapping all the different identifiers to a single, unified set of internal  identifiers.</p> <p>This allows researchers to upload data from different sources to the same platform, and allows tools to operate of data from different sources without having to worry about the differences in the identifiers used by those sources.</p> <p>Geneweaver also uses homology information to map paralogs and orthologs (collectively knows as homologs) across and within species. This allows researchers to perform  cross-species analysis, and to identify conserved and divergent biological functions.</p> <p>This concept is explained in more detail in the  Geneweaver Data Model concepts page, and in the Data model reference page.</p>"},{"location":"concepts/package-based-architecture/","title":"Package Based Architecture","text":"<p>GeneWeaver utilizes a package based architecture to allow for the development of new analysis tools and data types without requiring changes to the core GeneWeaver codebase. The GeneWeaver project is composed of several python packages that are used to build the GeneWeaver web application. These packages are also available for use in other projects.</p> <p>This page describes the GeneWeaver package based architecture, and provides an overview of why this architecture was chosen for the GeneWeaver project.</p>"},{"location":"concepts/package-based-architecture/#architecture-overview","title":"Architecture Overview","text":"<p>A  package-based architecture is a software design approach in which the functionality  of an application is divided into separate modules, or packages, each of which provides  a specific set of features or services. These packages can be thought of as  self-contained units of code that can be developed and maintained independently of one  another, and can be combined and reused to build larger, more complex systems.</p> <p>In a package-based architecture, each package typically has a well-defined interface or  API (application programming interface), which defines how other packages can interact  with it. This interface provides a clear separation of concerns, allowing developers to  focus on the specific functionality provided by each package, without having to worry  about the details of how other packages are implemented.</p> <p>One of the main benefits of a package-based architecture is modularity. By dividing an  application into separate packages, developers can more easily manage the complexity of  the code, and can develop and maintain each package independently of the others. This  can also make it easier to reuse code between projects, since individual packages can  be easily extracted and reused as needed.</p>"},{"location":"concepts/package-based-architecture/#motivation-for-package-based-architecture","title":"Motivation for Package Based Architecture","text":"<p>The package based architecture was chosen for the Geneweaver project so that it remains  flexible, modular, and scalable over time, while also making it easier to manage and  maintain the complexity of the codebase.</p>"},{"location":"concepts/package-based-architecture/#modularity-and-flexibility","title":"Modularity and Flexibility","text":"<p>A package-based architecture provides a modular design that makes it easier to manage  and maintain the complexity of the codebase. Geneweaver includes a range of complex  algorithms, processes and data structures, and dividing the application into separate  packages allows developers to focus on developing and maintaining each package  independently of the others. This helps ensure that the application remains stable  and scalable over time.</p>"},{"location":"concepts/package-based-architecture/#reusability","title":"Reusability","text":"<p>A package-based architecture promotes code reuse, which saves time and effort during  development. In a scientific application like Geneweaver, there is a need to reuse  certain algorithms, processes and data structures across different parts of the  application, and a package-based architecture makes this process easy.</p>"},{"location":"concepts/package-based-architecture/#collaboration","title":"Collaboration","text":"<p>A package-based architecture makes it easier for developers to work collaboratively  on the Geneweaver. By dividing the code into separate packages, developers can work  on different parts of the application independently, without having to worry about  conflicts or dependencies on other parts of the codebase.</p>"},{"location":"concepts/package-based-architecture/#testing","title":"Testing","text":"<p>A package-based architecture makes it easier to test the application. By dividing the application into separate packages, developers can test each package independently of the others, which makes it easier to write tests, and easier to identify and fix bugs.</p> <p>Available Packages</p> <p>A complete reference of the available packages can be found in the  Available Packages section.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>The pages in the \"Getting Started\" are intended to provide all new users with a clear  and concise introduction to the Geneweaver ecosystem. No matter who you are, this  section will help you quickly get up and running with basic features and functionalities in Geneweaver.</p> <p>For more in-depth information about the concepts presented in this section, please see the Concepts section and the Reference section.</p>"},{"location":"getting-started/#user-specific-entrypoints","title":"User Specific Entrypoints","text":"<p>If you're already familiar with Geneweaver, and just need to find content specific to your use-case, you can use the following links to jump to the appropriate documentation. If you find that you need more information, head back to this website and keep reading!</p> Researchers \ud83d\udd2cEducators &amp; Students \ud83d\udcdaSoftware Developers \ud83d\udcbb <p>Genomics researchers will find the web application to be the most straightforward way to get started with GeneWeaver. The web application is a fully integrated platform for the analysis of heterogeneous functional genomics data. Without ever leaving the  website, it will allow you to:</p> <ul> <li>Search \ud83d\udd0d for genomics data,</li> <li>Upload \ud83d\udce4 and curate genomic data, and</li> <li>Analyze \ud83c\udfd7\ufe0f and visualize genomic data.</li> </ul> <p>To learn more, you can either jump right in and head over to the GeneWeaver Web Application.</p> <p>Or you can read the extensive documentation that is specific to the web application Geneweaver Web Application Documentation.</p> <p>General documentation on the available analysis tools can be found on the  Analysis Tools page.</p> <p>If you want to run the analysis tools on your local computer, you can find more information in the Running Tools Locally section.</p> <p>Educators and students will find the ecosystem of software packages to be the most straightforward way to get started with GeneWeaver. The ecosystem of software packages is a collection of python packages that are used to build the GeneWeaver web application.</p> <p>If you just want to get started using Geneweaver to build cool stuff \ud83d\udcbb, the  Available Packages section might be what you want.</p> <p>What's Next?</p> <p>If you're new to Geneweaver, the documentation in this website is probably best read in order. Next up, we'll discuss the  Foundational Concepts that underpin the entire  Geneweaver software ecosystem.</p> <p>Click the \"Next\" button on the bottom of the page to continue your journey.</p>"},{"location":"getting-started/command-line-interface/","title":"Command Line Interface","text":"<p>Geneweaver provides a command line interface for interacting with the GeneWeaver web  application. The command line interface is a python package called  <code>geneweaver-client</code>, available on  PyPI. Users should consider using the command line interface if they want to run the analysis tools locally, if they want to automate the uploading or downloading of data to/from  the web application, </p>"},{"location":"getting-started/command-line-interface/#installation","title":"Installation","text":""},{"location":"getting-started/command-line-interface/#requirements","title":"Requirements","text":"<p>The <code>geneweaver-client</code> package requires python 3.7 or greater.</p>"},{"location":"getting-started/command-line-interface/#from-pypi","title":"From PyPI","text":"<p>To install the <code>geneweaver-client</code> package from PyPI, run the following command:</p> <pre><code>$ pip install geneweaver-client\n</code></pre>"},{"location":"getting-started/command-line-interface/#from-source","title":"From Source","text":"<p>To install the <code>geneweaver-client</code> package from source, run the following commands:</p> <p>Note</p> <p>You will need to have poetry installed.</p> <pre><code>git clone git@github.com:bergsalex/geneweaver-client.git\ncd geneweaver-client\npoetry install\n</code></pre>"},{"location":"getting-started/command-line-interface/#usage","title":"Usage","text":"<p>Coming Soon</p> <p>For now, please use the built-in help to learn about the command line interface. <pre><code>$ geneweaver --help    \n</code></pre></p>"},{"location":"getting-started/foundational-concepts/","title":"Foundational Concepts","text":"<p>This section provides a quick introduction to some key concepts that underpin the entire Geneweaver ecosystem. This section should be enough to get you started, but for a  comprehensive definition, please see the Concepts section.</p>"},{"location":"getting-started/foundational-concepts/#genes-genomic-features","title":"Genes (Genomic Features)","text":"<p>In GeneWeaver, a \"Gene\" \ud83e\uddec is a unique identifier for a gene in a particular organism.  Genes are the basic unit of analysis, and are used to build GeneSets. GeneWeaver  identifies genes using their unique identifiers, which are called \"Gene Identifiers\". A gene identifier is a unique name or number assigned to a gene. </p> <p>GeneWeaver supports a variety of different Gene Identifiers from different sources, including Ensemble (Gene, Protein, and Transcript), MGI, HGNC, and Entrez. Internally, each Gene Identifier is mapped to a unique Gene ID, which is used to identify genes across all data sources.</p> <p>For more information about Genes and GeneSets, please see the Genes and GeneSets page.</p>"},{"location":"getting-started/foundational-concepts/#genesets","title":"GeneSets","text":"<p>The central entity in GeneWeaver is called a \"GeneSet\" \ud83e\uddec+\ud83d\udcc2. A GeneSet  is a collection of genomic features that are related by a common biological function, pathway, process,  or other biological concept. GeneSets are used to organize and analyze heterogeneous  functional genomics data.</p> <p>Genesets are a fundamental component of Geneweaver, as the system uses them to perform  integrative analysis of functional genomics data. Researchers can compare and combine  multiple genesets to identify overlaps or similarities, which can provide insights into  the biological processes and pathways that are involved in the data being analyzed.</p>"},{"location":"getting-started/foundational-concepts/#species","title":"Species","text":"<p>Genomic features in Geneweaver are mapped within and across multiple species. Cross  species analysis enables the discovery of conserved mechanisms of biological functions,  and the discovery of divergent functions served by conserved biological mechanisms.</p> <p>Currently, 10 species are supported:</p> <ul> <li>Mus musculus - The Mouse \ud83d\udc01</li> <li>Homo sapiens - The Human \ud83e\uddcd</li> <li>Rattus norvegicus - The Rat \ud83d\udc00</li> <li>Danio rerio - The Zebrafish \ud83d\udc1f</li> <li>Drosophilia melanogaster - The Fruit Fly \ud83e\udeb0</li> <li>Macaca mulatta - Rhesus Monkey \ud83d\udc12 </li> <li>Caenorhabditis elegans - The Roundworm \ud83e\udeb1</li> <li>Saccharomyces cervisiae - Brewer's Yeast \ud83c\udf7a</li> <li>Gallus gallus - The Chicken \ud83d\udc13</li> <li>Canis familiaris - The Dog \ud83d\udc15</li> </ul>"},{"location":"getting-started/running-tools-locally/","title":"Running Tools Locally","text":"<p>Tip</p> <p>If you a researcher, you will find that the integrated tools in the web application are the most convenient way to run the analysis tools.</p>"},{"location":"getting-started/running-tools-locally/#introduction","title":"Introduction","text":"<p>Geneweaver is designed to allow you to run the analysis tools on your local computer. This pattern allows for developers to easily get started on tool development, and  allows analysis tools to be delivered as independent research products in their own right.</p> <p>Running tools locally can also be useful if you want to run the tools on a large  dataset, or if you want to run the tools on a dataset that is not available on the web  application. However, the web application will almost always be the most convenient way  to use the tools for most users, even with large datasets.</p>"},{"location":"getting-started/running-tools-locally/#pre-requisites","title":"Pre-requisites","text":"<p>To run any of the tools, you will need to have access to data that you want to analyze.</p> <p>In the examples below, we will utilize the  Command Line Interface to provide data to the tools.</p>"},{"location":"getting-started/running-tools-locally/#installation","title":"Installation","text":"<p>Coming Soon</p> <p>The local tools are currently in development, and are not yet available for  download. This section is a work in progress and will be updated as the tools become available.</p> Container Image (Recommended)From Source <p>The recommended way to run the tools locally is to use the container images that are  available on Docker Hub.</p> <p>To run the tools locally, you will need to download the source code for the specific tool that you want to run, and then install the dependencies for that tool. Each  tool has its own repository, and each repository has its own documentation.</p>"},{"location":"getting-started/running-tools-locally/#requirements","title":"Requirements","text":"<p>To run the tools locally, you will need to have Docker  installed.</p>"},{"location":"getting-started/running-tools-locally/#from-docker-hub","title":"From Docker Hub","text":""},{"location":"getting-started/running-tools-locally/#from-source","title":"From Source","text":"<p>```bash git clone</p>"},{"location":"getting-started/running-tools-locally/#usage","title":"Usage","text":"<p>The specific usage of each tool will vary by tool, but each follows a similar pattern.</p>"},{"location":"getting-started/web-application/","title":"Web Application","text":""},{"location":"getting-started/web-application/#introduction","title":"Introduction","text":"<p>The Geneweaver web application in a fully integrated platform  for the integration and analysis of heterogeneous functional genomics data. It is  designed to be a one-stop-shop for researchers looking to integrate and analyze complex  datasets in order to gain new insights into biological processes and pathways.</p> <p>Users of the web application users can benefit from a more  streamlined workflow, reduced learning curve, and improved collaboration and data  sharing capabilities. They can also benefit from the convenience of having all of their  tools and data accessible from a single, web-based interface, which can be accessed from any device with an internet connection.</p> <p></p> <p>Users that do not anticipate using the web application will still benefit from an  understanding of the concepts in this page. Fundamentally, all components of the  GeneWeaver ecosystem were designed and created to support the development the web  application.</p>"},{"location":"getting-started/web-application/#basic-workflow","title":"Basic Workflow","text":"<p>A basic workflow for a user of the web application is as follows:</p> <p>Step 1: Upload GeneSets / Search for GeneSets</p> <p>A user needs to either upload their own data, or search for (and find) data that they are interested in using the GeneSet search tool.</p> <p>Step 2: Create Projects / View Projects &amp; Tools</p> <p>In order to analyze GeneSets, they need to be added to a project. So a user needs to either create a new project, or select an existing project to add GeneSets to.</p> <p>Step 3: Analyze</p> <p>Once a user has added GeneSets to a project, they can then analyze the data using the tools available to them on the \"Analyze GeneSets\" page.</p> <p>Step 4: Interpret &amp; Annotate Results</p> <p>Once a user has analyzed their data, they can then interpret and annotate the results using the tools available to them on the \"View Results\" page.</p> <p>Step 5: User Groups &amp; Sharing Data</p> <p>Once a user has analyzed their data, they can then share their results with other users by adding them to a user group.</p>"},{"location":"getting-started/web-application/#continued-exploration","title":"Continued Exploration","text":"Researchers \ud83d\udd2cEducators &amp; Students \ud83d\udcdaSoftware Developers \ud83d\udcbb <p>To learn more, you can either jump right in and head over to the GeneWeaver Web Application</p> <p>Or you can read the extensive documentation that is specific to the web application: Geneweaver Web Application Documentation</p> <p>Work in Progress</p> <p>To learn more, you can either jump right in and head over to the</p> <p>GeneWeaver Web Application</p> <p>Or you can read the extensive documentation that is specific to the web application: Geneweaver Web Application Documentation</p> <p>Work in Progress</p> <p>To learn more, you can either jump right in and head over to the</p> <p>GeneWeaver Web Application</p> <p>Or you can read the extensive documentation that is specific to the web application: Geneweaver Web Application Documentation</p>"},{"location":"reference/","title":"Reference Documentation","text":""},{"location":"reference/acknowledgements/","title":"Acknowledgements","text":""},{"location":"reference/acknowledgements/#support","title":"Support","text":"<p>GeneWeaver / The Ontological Discovery Environment was initiated as a project of the  NIAAA Integrative Neuroscience Initiative on Alcoholism (<code>U01AA13499</code>, <code>U24AA13513</code>),  and is currently supported by R01 <code>AA018776</code>, jointly funded by NIDA and NIAAA. </p> <p>Additional support comes from the Center for Precision Genetics, NIH U54 <code>OD020351</code>.</p>"},{"location":"reference/acknowledgements/#citing-geneweaver","title":"Citing GeneWeaver","text":"<p>When using GeneWeaver, please cite:</p> <p>Erich J. Baker, Jeremy J. Jay, Jason A. Bubier, Michael A. Langston, and  Elissa J. Chesler. GeneWeaver: a web-based system for integrative functional genomics. Nucleic Acids Research; (2012) 40(D1): D1067-D1076</p>"},{"location":"reference/acknowledgements/#team-members","title":"Team Members","text":""},{"location":"reference/acknowledgements/#current-members-of-the-geneweaver-team","title":"Current members of the GeneWeaver team:","text":"<ul> <li>Elissa J. Chesler, Fearless Leader, Jive Translator</li> <li>Erich J. Baker, Database Design Leader</li> <li>Michael A. Langston, Graph Algorithms Team Leader</li> <li>Jason A. Bubier, Data Curator</li> <li>Charles Phillips, Graph Algorithms</li> <li>Computational Sciences Group, The Jackson Laboratory, Development and QA team<ul> <li>Alexander Berger, Software Engineer / Technical Lead</li> <li>Matthew Gerring, Software Engineer / Graph Database Engineer</li> <li>Beth Sundberg, Quality Assurance</li> </ul> </li> </ul>"},{"location":"reference/acknowledgements/#former-team-members","title":"Former team members:","text":"<ul> <li>Roumyana Kirova, Statistics and Data Mining</li> <li>Vivek Philip, Visualization</li> <li>Timothy Reynolds, Lead Developer</li> <li>Zuopan Li, Web Programmer</li> <li>Yun Zhang, Graph Algorithms</li> <li>Michael Marion, Data Curator</li> <li>Jeremy Jay, Lead Developer</li> </ul> <p>Geneweaver.org and  Geneweaver.org/help are maintained by the GeneWeaver  team and the  Chesler Lab at The Jackson Laboratory in Bar Harbor, Maine.</p>"},{"location":"reference/available-packages/","title":"Available Packages","text":"<p>GeneWeaver is a collection of python packages that are used to build the GeneWeaver web  application. </p> <p>These packages are also available for use in other projects. The packages are:</p> <ul> <li><code>geneweaver-core</code>:  Foundational shared functionality for the GeneWeaver project.</li> <li><code>geneweaver-client</code>:  A command line interface interacting with GeneWeaver ReST APIs.</li> <li><code>geneweaver-testing</code>:  GeneWeaver's shared automated tests.</li> <li><code>geneweaver-tools</code>: A framework for creating analysis tools for the GeneWeaver project.</li> <li><code>geneweaver-db</code>:  A package for interacting with the GeneWeaver database.</li> </ul> <p>Each package has its own documentation and code repository, which can be found in the  links above.</p>"},{"location":"reference/available-packages/#package-relationships","title":"Package Relationships","text":"<p>The following diagram shows the relationships between the packages.</p> <pre><code>graph LR\n    G[GeneWeaver Application]\n    D[geneweaver-db]\n    T[geneweaver-tools]\n    A[geneweaver-core]\n    E[geneweaver-testing]\n    C[geneweaver-client]\n    E --&gt; A &amp; T &amp; D --&gt; G\n    E &amp; A --&gt; C\n    E --&gt; G\n</code></pre> <p>The client consumes the ReST APIs provided by the GeneWeaver application.  <pre><code>sequenceDiagram\n    geneweaver-client -&gt;&gt;+ GeneWeaver Application: ReST API Call\n    GeneWeaver Application -&gt;&gt;+ Database: Database Query\n    Database --&gt;&gt;- GeneWeaver Application: Database Response\n    GeneWeaver Application --&gt;&gt;- geneweaver-client: ReST API Response</code></pre></p>"},{"location":"reference/available-packages/#next-steps","title":"Next Steps","text":"Researchers \ud83d\udd2cEducators &amp; Students \ud83d\udcdaSoftware Developers \ud83d\udcbb <p>Researchers should consider using the GeneWeaver web application to upload and  analyze their data. The web application is available at  geneweaver.org.</p> <p>Sometimes, it might be useful to use the command line interface to automate the uploading or downloading of data to/from the web application. This can be done using the python package called  <code>geneweaver-client</code>, which can either be installed directly <pre><code>pip install geneweaver-client\n</code></pre> or into a virtual environment <pre><code>python -m venv my-venv\nsource my-venv/bin/activate\npip install geneweaver-client\n</code></pre></p> <p>Coming Soon</p> <p>Documentation for educators and students is coming soon.</p> <p>Coming Soon</p> <p>Documentation for software developers is coming soon.</p>"},{"location":"reference/available-tools/","title":"Available Tools","text":"<p>Work in progress</p> <p>Geneweaver is in the process of repackaging its tools. This documentation is here for reference, based on existing and legacy tool packaging, and will be updated as each tool is repackaged.</p> <p>Complete documentation on the legacy versions of analysis tools can be found in the legacy documentation.</p>"},{"location":"reference/available-tools/#hisim-graph","title":"HiSim Graph","text":"<p>The HiSim Graph, short for Hierarchical Similarity Graph, is a tool for grouping  functional genomic datasets based on the genes they contain. For example: The user may  want to determine what a set of experiments on alcohol preference have in common, and  what makes various experiments unique from one another. Alternatively, one may wish to  take a large set of studies of related phenomena and identify their shared or distinct  substrates. In this situation one may want to know whether there is a shared biological  basis for addiction and learning, and if so, what the substrate is. The user might also  want to examine studies of a large number of related disorders and determine whether a  more appropriate biologically-based classification can be constructed.</p> <p>The HiSim Graph Tool is designed to address these goals; it presents a tree of  hierarchical relationships for a set of input GeneSets. The structure is determined  solely from the gene overlaps of every combination of GeneSets.</p>"},{"location":"reference/available-tools/#geneset-graph","title":"GeneSet Graph","text":"<p>The GeneSet Graph is designed for the user in need of a partitioned display to  illustrate just how tied genes are to one another. For example: a user in need of a  GeneSet Graph would look for visual references more than chemical references or  references by utility. A GeneSet Graph can also help pick apart the most valuable or  most occurring genes depending on the user\u2019s preference.</p>"},{"location":"reference/available-tools/#jaccard-similarity","title":"Jaccard Similarity","text":"<p>The Jaccard Similarity Tool displays a matrix of Venn diagrams, which can be very useful for quickly finding overlapping GeneSets and evaluating the similarity of results across a collection of experiments. This snapshot may enable you to determine which can be  removed or kept for more complex comparison analysis (such as the HiSim Graph).</p>"},{"location":"reference/available-tools/#geneset-clustering","title":"GeneSet Clustering","text":"<p>Clustering is one of the most powerful tools in bioinformatics, where classifications  are too strict for data distinction, clustering helps give the user an evaluation that  is not so distinct.</p>"},{"location":"reference/available-tools/#mset-modular-single-set-enrichment-tool","title":"MSET (Modular Single-Set Enrichment Tool)","text":"<p>Modular single-set enrichment tool (MSET): randomization-based test for list over- or  under-representation</p> <p>MSET was developed to compare gene lists.  From four character lists  <pre><code>gene_list1, \ngene_list2, \nbackground1, \nbackground2\n</code></pre> it computes a randomization-based p-value describing the likelihood that the intersect  of <code>gene_list1</code> and <code>gene_list2</code> is underexpressed or overexpressed relative to randomness alone.</p> <p>MSET is based on work from Eisinger et al., 2013, \u201cDevelopment of a versatile enrichment analysis tool reveals associations between the maternal brain and mental health disorders, including autism.\u201d BMC Neuroscience.</p>"},{"location":"reference/available-tools/#abba-gene-search","title":"ABBA Gene Search","text":"<p>Given a set of interesting genes, do other genes have similar relationships to known  sets of genes? For example, given a set of genes known to be related to drug abuse,  what other genes share similar expression patterns in drug abuse gene sets? </p> <p>By answering this question, it becomes possible to elucidate under-studied or obfuscated genes that may play a role in complex phenotypes.</p> <p>We have developed a new GeneWeaver tool to address this question, which we call  Anchored Biclique of Biomolecular Associations (ABBA).  This tool takes advantage of the large number of collected data and cross-species  integration to find new genes for investigation.</p> <p>The search begins with a user-provided list of genes of interest, such as highly-studied genes with known pathways and relationships. The database then finds any gene sets that  contain at least N of the genes in the provided list. From the resulting list of gene  sets, ABBA then isolates any genes that occur in at least M GeneSets but not in the  initial list. These resulting genes share similar gene set overlap with the original  input set, but may not have been previously considered in relation to the gene set of  interest.</p>"},{"location":"reference/available-tools/#boolean-algebra","title":"Boolean Algebra","text":"<p>The Boolean Algebra Tool performs basic set operations on at least two Gene Sets.  Results are displayed as lists of genes beloging to one of the three different types of  set operations: Union, Intersect, and Symmetric Difference. Furthermore, results allow  users to quickly determine new relationships between Gene Sets and create a new Gene Set based on set-derived findings.</p>"},{"location":"reference/available-tools/#dbscan-gene-clustering","title":"DBSCAN Gene Clustering","text":"<p>DBSCAN (Density-Based Spatial Clustering of Application with Noise) is a clustering  algorithm that groups genes into clusters based on how closely related the genes are.</p>"},{"location":"reference/available-tools/#why-use-the-dbscan-tool","title":"Why Use the DBSCAN Tool?","text":"<p>In general, clustering is used to find patterns or outliers within data sets. In this  implementation of DBSCAN, genes in the same cluster would be considered similar, while  genes in different clusters would be less similar. An explanation of DBSCAN can be found here. Within Geneweaver, this tool can be used  to infer relationships between genes. For example, if clusters with similar genes  continue to appear in tests across multiple data sets, one could say that these genes  are closely related.</p>"},{"location":"reference/contributing-guide/","title":"Contributing Guide","text":"<p>This document outlines the baseline contribution guidelines for all packages in the <code>geneweaver-*</code> ecosystem. These guidelines are intended to concretely define what  processes and practices a developer should follow when contributing to the project for their contribution to be accepted.</p>"},{"location":"reference/contributing-guide/#tests","title":"Tests","text":"<p>GeneWeaver is a community driven project with a variety of contributors. The project relies on automated tests to allow developers to be confident that their changes do not break existing functionality. </p> <p>All contributed code should be tested. Test code coverage is calculated using the  <code>pytest-cov</code> module. The minimum code coverage threshold varies per module. Code should be well tested through a variety of tests, not just a high code coverage percentage.</p> <p>The <code>geneweaver-testing</code> module provides baseline automated tests and fixtures, as do the other <code>geneweaver-*</code> modules. The testing tools in these modules can be utilized to make writing tests for your code as straightforward as possible.</p>"},{"location":"reference/contributing-guide/#code-style","title":"Code Style","text":"<p>In order to make the code in the <code>geneweaver-*</code> ecosystem consistent, and to make it  as easy as possible to contribute to the codebase, we have adopted a set of code style standards and auto-formatting tools. </p>"},{"location":"reference/contributing-guide/#docstrings","title":"Docstrings","text":"<p>All PyTest Tests and PyTest Fixtures should have docstrings. The docstrings should follow the Google Style for docstrings.</p>"},{"location":"reference/contributing-guide/#type-annotations","title":"Type Annotations","text":"<p>All PyTest Tests and PyTest Fixtures should have type annotations. MyPy will be used to check type annotations.</p>"},{"location":"reference/contributing-guide/#code-linting-ruff-and-mypy","title":"Code Linting - Ruff and MyPy","text":"<p>All code in the <code>geneweaver-*</code> ecosystem is linted using  ruff and mypy.</p> <p>GeneWeaver strives to use the most comprehensive set of linting rules reasonably  available, to both ensure that the code is as clean as possible, and to provide as much feedback as possible to the developer.</p> Ruleset Configuration for <code>ruff</code>: <pre><code>[tool.ruff]\nselect = [\n# Pyflakes Ruleset\n\"E\", # Pycodestyle Ruleset (E - Error, W - Warning)\n\"F\", \"W\", # McCabe Complexity\n\"C90\",\n# pep8-naming\n\"N\",\n# flake8-builtins\n\"A\",\n# flake8-bugbear\n\"B\", # flake8-annotations\n\"ANN\",\n# flake8-pytest-stlye    \n\"PT\",\n# pydocstyle\n\"D\", # Isort\n\"I\", # eradicate\n\"ERA\", # pandas-vet\n\"PD\", # NumPy-specific rules\n\"NPY\", ]\n</code></pre> <p>You can find comprehensive documentation on theses rulesets in the ruff documentation</p>"},{"location":"reference/contributing-guide/#code-formatting-black-and-ruff","title":"Code Formatting - Black and Ruff","text":"<p>All code in the <code>geneweaver-*</code> ecosystem is formatted using  black and isort.</p>"},{"location":"reference/contributing-guide/#development-process","title":"Development Process","text":"<p>Before submitting a pull request, please run the following commands to check your code: <pre><code>ruff check src/geneweaver tests --fix\nblack src/geneweaver tests\npytest tests\n</code></pre></p>"},{"location":"reference/data-model/","title":"Data Model","text":"<p>Work In Progress</p> <p>This page is currently under construction, and not all tables in the data model are currently listed on this page. </p>"},{"location":"reference/data-model/#geneset-table","title":"Geneset Table","text":"<p>The geneset table is the heart of the geneweaver data model. The geneset table is  contained in the <code>production</code> schema. The geneset table contains the following columns: <pre><code>erDiagram\n    geneset {\n        bigint gs_id\n        integer usr_id\n        bigint file_id\n        varchar gs_name\n        varchar gs_abbreviation\n        integer pub_id\n        integer res_id\n        integer cur_id\n        varchar gs_description\n        integer sp_id\n        integer gs_count\n        integer gs_threshold_type\n        varchar gs_threshold\n        varchar gs_groups\n        varchar gs_attribution_old\n        varchar gs_uri\n        integer gs_gene_id_type\n        date gs_created\n        varchar admin_flag\n        timestamp gs_updated\n        varchar gs_status\n        varchar gsv_qual\n        integer gs_attribution\n        boolean gs_is_edgelist\n    }</code></pre></p>"},{"location":"reference/data-model/#genes-geneset-values","title":"Genes &amp; Geneset Values","text":"<p>Geneset values are the genomic features in the geneset. The geneset values table is contained in the <code>extsrc</code> schema. The geneset values table is an associative table between the geneset table and the gene table. The geneset values table and the genes table contain the following columns: <pre><code>erDiagram\n    geneset }o--|| geneset_value : hasA\n    gene }o--|| geneset_value : hasA\n    geneset_value {\n        bigint gs_id\n        bigint ode_gene_id\n        numeric gsv_value\n        bigint gsv_hits\n        character_varying[] gsv_source_list\n        numeric[] gsv_values_list\n        boolean gsv_in_threshold\n        date gsv_date\n    }\n    gene {\n        bigint ode_gene_id\n        varchar ode_ref_id\n        integer gdb_id\n        integer sp_id\n        boolean ode_pref\n        date ode_date\n        bigint[] old_ode_gene_ids\n    }</code></pre></p>"},{"location":"reference/data-model/#files","title":"Files","text":"<p>Genesets are created from user uploaded files. The file table is contained in the <code>production</code> schema. The file table contains the following columns: <pre><code>erDiagram\n    geneset ||--o{  file : createdFrom\n    file {\n        bigint file_id\n        bigint file_size\n        varchar file_uri\n        text file_contents\n        varchar file_comments\n        date file_created\n        text file_changes\n    }</code></pre></p>"},{"location":"reference/data-model/#species","title":"Species","text":"<p>Genesets are of a species, that is, the genomic features in the geneset are from a specific species. The species table is contained in the <code>odestatic</code> schema. The species table contains the following columns: <pre><code>erDiagram\n    geneset ||--o{ species: hasA\n    species {\n        integer sp_id\n        varchar sp_name\n        integer sp_taxid\n        integer sp_ref_gdb_id\n        date sp_date\n        varchar sp_biomart_info\n        text sp_source_data\n    }</code></pre></p>"},{"location":"reference/data-model/#tier-curation-level","title":"Tier (Curation Level)","text":"<p>Geneset tiers are indicated using the curation levels table. The curation levels table is contained in the <code>odestatic</code> schema. The curation levels table contains the following columns: <pre><code>erDiagram\n    geneset ||--o{  curation_levels: hasA\n    curation_levels {\n        integer cur_id\n        varchar cur_name\n        varchar cur_desc\n        varchar cur_curator\n    }</code></pre></p>"},{"location":"reference/data-model/#publications","title":"Publications","text":"<p>Genesets can be associated with publications. The publication table is contained in the <code>production</code> schema. The publication table contains the following columns:</p> <pre><code>erDiagram\n    geneset ||--o{  publication : associatedWith\n    publication {\n        integer pub_id\n        varchar pub_authors\n        varchar pub_title\n        varchar pub_abstract\n        varchar pub_journal\n        varchar pub_volume\n        varchar pub_pages\n        varchar pub_month\n        varchar pub_year\n        varchar pub_pubmed\n    }</code></pre>"},{"location":"reference/data-model/#projects","title":"Projects","text":"<p>Genesets can be added to projects. Project membership is modeled using an associative (intermediate) table named the <code>project2geneset</code> table. The project and project2geneset tables are contained in the <code>production</code> schema. The tables contain the following  columns: <pre><code>erDiagram\n    geneset }o--|| project2geneset: containedIn\n    project }o--|| project2geneset: contains\n    project {\n        integer pj_id\n        integer usr_id\n        varchar pj_name\n        varchar pj_groups\n        varchar pj_sessionid\n        date pj_created\n        text pj_notes\n        char pj_star\n    }\n    project2geneset {\n        integer pj_id\n        bigint gs_id\n        date modified_on\n    }</code></pre></p>"},{"location":"reference/data-model/#user-table","title":"User Table","text":"<p>The user table is used to store user information, and is used to associate users with other Geneweaver entities. <pre><code>erDiagram\n    geneset ||--o{  usr : createdBy\n    usr }o--|| notifications: canHave \n    usr }o--|| usr2grp: memberOf\n    grp }o--|| usr2grp: hasMember\n    usr {\n        integer usr_id\n        varchar usr_first_name\n        varchar usr_last_name\n        varchar usr_email\n        varchar usr_password\n        varchar usr_prefs\n        integer usr_admin\n        timestamp usr_last_seen\n        date usr_created\n        text ip_addr\n        varchar apikey\n        boolean is_guest\n        varchar usr_sso_id\n    }\n    notifications {\n        integer notification_id\n        text message\n        integer usr_id\n        timestamp time_sent\n        boolean read\n        varchar subject\n        boolean dismissed\n    }\n    grp {\n        integer grp_id\n        varchar grp_name\n        boolean grp_private\n        date grp_created\n    }\n    usr2grp {\n        integer usr_id\n        integer grp_id\n        integer u2g_privileges\n        integer u2g_status\n        varchar u2g_comment\n        date u2g_created\n    }</code></pre></p>"},{"location":"reference/data-model/#full-relational-diagram","title":"Full Relational Diagram","text":"<p>Work In Progress</p> <p>This page is currently under construction, and not all tables in the data model are currently listed on this page. This diagram only contains tables that have been defined in the page, and does not represent the full data model.</p> <pre><code>erDiagram\n    geneset }o--|| geneset_value : hasA\n    gene }o--|| geneset_value : hasA\n    geneset ||--o{  usr : ownedBy\n    geneset ||--o{  file : createdFrom\n    geneset ||--o{  publication : associatedWith\n    geneset ||--o{  curation_levels: hasA\n    geneset ||--o{ species: hasA\n    geneset }o--|| project2geneset: containedIn\n    project }o--|| project2geneset: contains\n    usr }o--|| notifications: canHave \n    usr }o--|| usr2grp: memberOf\n    grp }o--|| usr2grp: hasMember\n    geneset {\n        bigint gs_id\n        integer usr_id\n        bigint file_id\n        varchar gs_name\n        varchar gs_abbreviation\n        integer pub_id\n        integer res_id\n        integer cur_id\n        varchar gs_description\n        integer sp_id\n        integer gs_count\n        integer gs_threshold_type\n        varchar gs_threshold\n        varchar gs_groups\n        varchar gs_attribution_old\n        varchar gs_uri\n        integer gs_gene_id_type\n        date gs_created\n        varchar admin_flag\n        timestamp gs_updated\n        varchar gs_status\n        varchar gsv_qual\n        integer gs_attribution\n        boolean gs_is_edgelist\n    }\n    geneset_value {\n        bigint gs_id\n        bigint ode_gene_id\n        numeric gsv_value\n        bigint gsv_hits\n        character_varying[] gsv_source_list\n        numeric[] gsv_values_list\n        boolean gsv_in_threshold\n        date gsv_date\n    }\n    gene {\n        bigint ode_gene_id\n        varchar ode_ref_id\n        integer gdb_id\n        integer sp_id\n        boolean ode_pref\n        date ode_date\n        bigint[] old_ode_gene_ids\n    }\n    file {\n        bigint file_id\n        bigint file_size\n        varchar file_uri\n        text file_contents\n        varchar file_comments\n        date file_created\n        text file_changes\n    }\n    publication {\n        integer pub_id\n        varchar pub_authors\n        varchar pub_title\n        varchar pub_abstract\n        varchar pub_journal\n        varchar pub_volume\n        varchar pub_pages\n        varchar pub_month\n        varchar pub_year\n        varchar pub_pubmed\n    }\n    usr {\n        integer usr_id\n        varchar usr_first_name\n        varchar usr_last_name\n        varchar usr_email\n        varchar usr_password\n        varchar usr_prefs\n        integer usr_admin\n        timestamp usr_last_seen\n        date usr_created\n        text ip_addr\n        varchar apikey\n        boolean is_guest\n        varchar usr_sso_id\n    }\n    notifications {\n        integer notification_id\n        text message\n        integer usr_id\n        timestamp time_sent\n        boolean read\n        varchar subject\n        boolean dismissed\n    }\n    curation_levels {\n        integer cur_id\n        varchar cur_name\n        varchar cur_desc\n        varchar cur_curator\n    }\n    species {\n        integer sp_id\n        varchar sp_name\n        integer sp_taxid\n        integer sp_ref_gdb_id\n        date sp_date\n        varchar sp_biomart_info\n        text sp_source_data\n    }\n    project {\n        integer pj_id\n        integer usr_id\n        varchar pj_name\n        varchar pj_groups\n        varchar pj_sessionid\n        date pj_created\n        text pj_notes\n        char pj_star\n    }\n    project2geneset {\n        integer pj_id\n        bigint gs_id\n        date modified_on\n    }\n    grp {\n        integer grp_id\n        varchar grp_name\n        boolean grp_private\n        date grp_created\n    }\n    usr2grp {\n        integer usr_id\n        integer grp_id\n        integer u2g_privileges\n        integer u2g_status\n        varchar u2g_comment\n        date u2g_created\n    }</code></pre>"},{"location":"reference/development-guide/","title":"Development Guide","text":""},{"location":"reference/development-guide/#project-dependencies","title":"Project Dependencies","text":""},{"location":"reference/development-guide/#python-version","title":"Python Version","text":"<p>All packages in the <code>geneweaver-*</code> ecosystem depend on Python version 3.9 or higher. </p> <p>If you need to manage multiple version of python on your development machine, we  recommend using pyenv to manage your python versions.</p> <p>Support for Python 3.7</p> <p>It's possible that some of the packages in the <code>geneweaver-*</code> ecosystem will work with Python 3.7, but this is not guaranteed, and is not tested.</p>"},{"location":"reference/development-guide/#poetry","title":"Poetry","text":"<p>All packages in the <code>geneweaver-*</code> ecosystem use poetry to manage dependencies and build packages. </p> <p>The Python Poetry Documentation maintains a list of installation instructions for all major operating systems.</p>"},{"location":"reference/development-guide/#pytest","title":"PyTest","text":"<p>All packages in the <code>geneweaver-*</code> ecosystem use  PyTest as their test runner.</p>"},{"location":"reference/development-guide/#package-based-architecture","title":"Package Based Architecture","text":"<p>Package Based Architecture</p> <p>The <code>geneweaver-*</code> ecosystem is built around the concept of a package based  architecture. This means that each package in the ecosystem is designed to be  independent of the other packages. This allows for the ecosystem to be extended  and modified without breaking the other packages.</p> <p>For more information, see the  Package Based Architecture page.</p>"},{"location":"reference/geneset-tiers/","title":"GeneSet Tiers","text":"<p>GeneSet tiers \ud83e\udd47\ud83e\udd48\ud83e\udd49\ud83c\udf31\ud83d\udd12 are used to provide an easily recognizable and intuitive way  for users to understand the quality and reliability of the data in a geneset. The  following table provides a reference description of each tier.</p> Geneset Tier Description \ud83e\udd47Tier IPublic Resource Data Tier I data are professionally curated into another major database and are imported into GeneWeaver,which ensures consistency of metadata. Resource grade data is updated on a six-month cycle. These include: gene annotations to KEGG, MP and GO, curated functional associations in Neuroinformatics Framework, and Comparative Toxicogenomics Database. \ud83e\udd48Tier IIMachine-Generated from public sources Tier II data are computationally generated from data in public sources. These include empirical data obtained from public sources and their associated analytical tools, e.g. bulk analysis of gene co-expression to phenotypes across mouse strains from GeneNetwork.org, or QTL positional candidates from MGI. In contrast to Tier I in which the individual gene annotations to function are manually curated, Tier II includes machine generated gene annotations to functions from curated experimental data. GeneWeaver curators examine data and metadata. \ud83e\udd49Tier IIIHuman-Curated Data Tier III data are directly entered or reviewed by a professional curator for redundancy with existing records and adherence to documentation standards. Users who submit data under Tier IV have the option of sharing their data to the public. These data will be marked provisional until reviewed by the curator for data entry errors, compliance to metadata standards and redundancy with existing data. The submitter of the data will have the opportunity to approve the curators modifications to them prior to upgrade to Tier III status. For some research areas, a professional curator has identified and entered gene expression, quantitative trait locus and genomewide association studies (GWAS). Where possible, the curator has obtained results directly from the study authors, supplements or data repositories such as GEO, in addition to the often highly-filtered set of results reported in publications. \ud83c\udf31Tier IVSubmitted to Public-Provisional Tier IV consists of user submitted data that has been shared to the public prior to review. This data is indicated as provisional, but can be used in all analyses. Curatorial review is required to remove the provisional label. \ud83d\udd12Tier VPrivate User and Group Data, Uncurated Data in user accounts that is assigned private or group level access is confidential, is not exposed to analyses by users outside of the group to whom it is shared, and is therefore not reviewed by the professional curator."},{"location":"reference/restful-api/","title":"ReST API","text":"<p>Work In Progress</p> <p>This page is currently under construction. Please check back later for updates.</p> <p>For now, you can read the  documentation on the legacy API.</p>"},{"location":"tutorial/","title":"Tutorial","text":"<p>In this tutorial section, we will explore the various tools and functionalities offered  by Geneweaver.org. Whether you are a biologist, a geneticist, or a bioinformatician,  a software engineer, or studying to become any of the former, this tutorial section will provide you with the necessary knowledge to fully utilize Geneweaver.org in your  research.</p> <p>The documents in this section are focused on providing detailed guidance and instruction for users who are already familiar with the basics of the software. They will cover more advanced features, specific use cases, and best practices for using the tool  effectively. They are usually more in-depth than \"getting started\" sections, and may  include step-by-step instructions, code examples, or other resources to help you  master a particular aspect of the software.</p>"},{"location":"tutorial/accessing-geneweaver-data/","title":"Accessing Geneweaver Data","text":"Researchers \ud83d\udd2cEducators &amp; Students \ud83d\udcdaSoftware Developers \ud83d\udcbbData Scientists \ud83d\udcca <p>Tip</p>"},{"location":"tutorial/running-a-local-database/","title":"Running a Local Database","text":"Researchers \ud83d\udd2cEducators &amp; Students \ud83d\udcdaSoftware Developers \ud83d\udcbb <p>Tip</p> <p>The best way to access Geneweaver data for researchers is to use the web  application.</p> <p>Tip</p> <p>The best way to access Geneweaver data for researchers is to use the web  application.</p> <p>Tip</p> <p>The best way to access Geneweaver data for researchers is to use the web  application.</p>"}]}